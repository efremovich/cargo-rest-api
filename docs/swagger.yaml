definitions:
  entity.DetailDocumentType:
    properties:
      Type:
        type: string
      uuid:
        type: string
    type: object
  entity.DetailDriver:
    properties:
      name:
        type: string
      user_uuid:
        type: string
      uuid:
        type: string
      vehicles:
        items: {}
        type: array
    type: object
  entity.DetailOrder:
    properties:
      external_uuid:
        type: string
      order_date:
        type: string
      passengers:
        items: {}
        type: array
      payment: {}
      seat:
        type: string
      status: {}
      status_uuid:
        type: string
      trip: {}
      trip_uuid:
        type: string
      uuid:
        type: string
    type: object
  entity.DetailOrderStatusType:
    properties:
      Type:
        type: string
      uuid:
        type: string
    type: object
  entity.DetailPassenger:
    properties:
      birthday:
        type: string
      document_number:
        type: string
      document_series:
        type: string
      documetn_type: {}
      first_name:
        type: string
      last_name:
        type: string
      passenger_type_uuid:
        type: string
      patronomic:
        type: string
      user_uuid:
        type: string
      uuid:
        type: string
    type: object
  entity.DetailPassengerType:
    properties:
      Type:
        type: string
      uuid:
        type: string
    type: object
  entity.DetailPayment:
    properties:
      amount:
        type: number
      external_uuid:
        type: string
      orders:
        items: {}
        type: array
      payment_date:
        type: string
      trip: {}
      trip_uuid:
        type: string
      user: {}
      user_uuid:
        type: string
      uuid:
        type: string
    type: object
  entity.DetailPrice:
    properties:
      passenger_type: {}
      passenger_type_uuid:
        type: string
      price:
        type: number
      uuid:
        type: string
    type: object
  entity.DetailRegularityType:
    properties:
      Type:
        type: string
      uuid:
        type: string
    type: object
  entity.DetailRoute:
    properties:
      distance:
        type: integer
      distance_time:
        type: integer
      from_uuid:
        type: string
      prices:
        items: {}
        type: array
      to_uuid:
        type: string
      uuid:
        type: string
    type: object
  entity.DetailSity:
    properties:
      latitude:
        type: string
      longitude:
        type: string
      name:
        type: string
      region:
        type: string
      uuid:
        type: string
    type: object
  entity.DetailTrip:
    properties:
      arravial_tive:
        type: string
      departure_time:
        type: string
      driver_uuid:
        type: string
      regularity_type_uuid:
        type: string
      route_uuid:
        type: string
      uuid:
        type: string
      vehicle_uuid:
        type: string
    type: object
  entity.DetailUserPreference:
    properties:
      dark_mode:
        type: boolean
      language:
        type: string
      skip_tour:
        type: boolean
    type: object
  entity.DetailVehicle:
    properties:
      class:
        type: string
      model:
        type: string
      number_of_seats:
        type: integer
      reg_code:
        type: string
      uuid:
        type: string
    type: object
  response.errorOutput:
    properties:
      args:
        type: string
      code:
        type: integer
      data: {}
      error_code:
        type: string
      message:
        type: string
    type: object
  response.successOutput:
    properties:
      code:
        type: integer
      data: {}
      message:
        type: string
      meta: {}
    type: object
host: api.cargo.re-base.ru:8888
info:
  contact:
    email: sasha.fima@gmail.com
    name: Aleksand Efremov
    url: https://github.com/efremovich/cargo-rest-api
  description: Enter your bearer token in the format **Bearer &lt;token>**
  license:
    name: MIT
  title: cargo-rest-api
  version: "1.0"
paths:
  /api/ping:
    get:
      consumes:
      - application/json
      description: Check server response.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.successOutput'
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorOutput'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorOutput'
      summary: Ping server
      tags:
      - development
  /api/secret:
    get:
      consumes:
      - application/json
      description: Retrieve base64 encoded string of private key and public key through
        rest api.
      parameters:
      - default: en
        description: Language code
        enum:
        - en
        - ru
        in: header
        name: Accept-Language
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.successOutput'
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorOutput'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorOutput'
      summary: Generate a secret
      tags:
      - development
  /api/v1/external/documentType:
    post:
      consumes:
      - application/json
      description: Create a new documentType.
      parameters:
      - default: en
        description: Language code
        enum:
        - en
        - ru
        in: header
        name: Accept-Language
        type: string
      - description: Request id
        in: header
        name: Set-Request-Id
        type: string
      - description: DocumentType documentType
        in: body
        name: documentType
        required: true
        schema:
          $ref: '#/definitions/entity.DetailDocumentType'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/response.successOutput'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorOutput'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.errorOutput'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.errorOutput'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorOutput'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorOutput'
      security:
      - BasicAuth: []
      - JWTAuth: []
      summary: Create a new documentType
      tags:
      - document types
  /api/v1/external/documentType/{uuid}:
    delete:
      description: Delete an existing documentType.
      parameters:
      - default: en
        description: Language code
        enum:
        - en
        - ru
        in: header
        name: Accept-Language
        type: string
      - description: Request id
        in: header
        name: Set-Request-Id
        type: string
      - description: DocumentType UUID
        in: path
        name: uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.successOutput'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorOutput'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.errorOutput'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.errorOutput'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorOutput'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorOutput'
      security:
      - BasicAuth: []
      - JWTAuth: []
      summary: Delete documentType
      tags:
      - document types
    get:
      description: Get detail of existing documentType.
      parameters:
      - default: en
        description: Language code
        enum:
        - en
        - ru
        in: header
        name: Accept-Language
        type: string
      - description: Request id
        in: header
        name: Set-Request-Id
        type: string
      - description: DocumentType UUID
        in: path
        name: uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.successOutput'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorOutput'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.errorOutput'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.errorOutput'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorOutput'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorOutput'
      security:
      - BasicAuth: []
      - JWTAuth: []
      summary: Get documentType
      tags:
      - document types
  /api/v1/external/documentType/uuid:
    put:
      consumes:
      - application/json
      description: Update an existing documentType.
      parameters:
      - default: en
        description: Language code
        enum:
        - en
        - ru
        in: header
        name: Accept-Language
        type: string
      - description: Request id
        in: header
        name: Set-Request-Id
        type: string
      - description: DocumentType UUID
        in: path
        name: uuid
        required: true
        type: string
      - description: DocumentType name
        in: formData
        name: name
        required: true
        type: string
      - description: DocumentType region
        in: formData
        name: region
        required: true
        type: string
      - description: DocumentType latitude
        in: formData
        name: latitude
        required: true
        type: string
      - description: DocumentType longitude
        in: formData
        name: longitude
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.successOutput'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorOutput'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.errorOutput'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.errorOutput'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorOutput'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorOutput'
      security:
      - BasicAuth: []
      - JWTAuth: []
      summary: Update documentType
      tags:
      - document types
  /api/v1/external/documentTypes:
    get:
      description: Get list of existing documentTypes.
      parameters:
      - default: en
        description: Language code
        enum:
        - en
        - ru
        in: header
        name: Accept-Language
        type: string
      - description: Request id
        in: header
        name: Set-Request-Id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.successOutput'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorOutput'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.errorOutput'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.errorOutput'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorOutput'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorOutput'
      security:
      - BasicAuth: []
      - JWTAuth: []
      summary: Get documentTypes
      tags:
      - document types
  /api/v1/external/driver:
    post:
      consumes:
      - application/json
      description: Create a new driver.
      parameters:
      - default: en
        description: Language code
        enum:
        - en
        - ru
        in: header
        name: Accept-Language
        type: string
      - description: Request id
        in: header
        name: Set-Request-Id
        type: string
      - description: Driver driver
        in: body
        name: driver
        required: true
        schema:
          $ref: '#/definitions/entity.DetailDriver'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/response.successOutput'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorOutput'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.errorOutput'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.errorOutput'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorOutput'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorOutput'
      security:
      - BasicAuth: []
      - JWTAuth: []
      summary: Create a new driver
      tags:
      - drivers
  /api/v1/external/driver/{uuid}:
    delete:
      description: Delete an existing driver.
      parameters:
      - default: en
        description: Language code
        enum:
        - en
        - ru
        in: header
        name: Accept-Language
        type: string
      - description: Request id
        in: header
        name: Set-Request-Id
        type: string
      - description: Driver UUID
        in: path
        name: uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.successOutput'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorOutput'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.errorOutput'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.errorOutput'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorOutput'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorOutput'
      security:
      - BasicAuth: []
      - JWTAuth: []
      summary: Delete driver
      tags:
      - drivers
    get:
      description: Get detail of existing driver.
      parameters:
      - default: en
        description: Language code
        enum:
        - en
        - ru
        in: header
        name: Accept-Language
        type: string
      - description: Request id
        in: header
        name: Set-Request-Id
        type: string
      - description: Driver UUID
        in: path
        name: uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.successOutput'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorOutput'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.errorOutput'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.errorOutput'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorOutput'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorOutput'
      security:
      - BasicAuth: []
      - JWTAuth: []
      summary: Get driver
      tags:
      - drivers
  /api/v1/external/driver/uuid:
    put:
      consumes:
      - application/json
      description: Update an existing driver.
      parameters:
      - default: en
        description: Language code
        enum:
        - en
        - ru
        in: header
        name: Accept-Language
        type: string
      - description: Request id
        in: header
        name: Set-Request-Id
        type: string
      - description: Driver driver
        in: body
        name: driver
        required: true
        schema:
          $ref: '#/definitions/entity.DetailDriver'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.successOutput'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorOutput'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.errorOutput'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.errorOutput'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorOutput'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorOutput'
      security:
      - BasicAuth: []
      - JWTAuth: []
      summary: Update driver
      tags:
      - drivers
  /api/v1/external/driver/vehicle_add:
    post:
      consumes:
      - application/json
      description: Add vehicle to a driver.
      parameters:
      - default: en
        description: Language code
        enum:
        - en
        - ru
        in: header
        name: Accept-Language
        type: string
      - description: Request id
        in: header
        name: Set-Request-Id
        type: string
      - description: Driver driver
        in: body
        name: driver
        required: true
        schema:
          $ref: '#/definitions/entity.DetailDriver'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/response.successOutput'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorOutput'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.errorOutput'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.errorOutput'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorOutput'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorOutput'
      security:
      - BasicAuth: []
      - JWTAuth: []
      summary: Add vehicle to a driver
      tags:
      - drivers
  /api/v1/external/driver/vehicle_del:
    post:
      consumes:
      - application/json
      description: Delete vehicle to a driver.
      parameters:
      - default: en
        description: Language code
        enum:
        - en
        - ru
        in: header
        name: Accept-Language
        type: string
      - description: Request id
        in: header
        name: Set-Request-Id
        type: string
      - description: Driver driver
        in: body
        name: driver
        required: true
        schema:
          $ref: '#/definitions/entity.DetailDriver'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/response.successOutput'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorOutput'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.errorOutput'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.errorOutput'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorOutput'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorOutput'
      security:
      - BasicAuth: []
      - JWTAuth: []
      summary: Delete vehicle to a driver
      tags:
      - drivers
  /api/v1/external/drivers:
    get:
      description: Get list of existing drivers.
      parameters:
      - default: en
        description: Language code
        enum:
        - en
        - ru
        in: header
        name: Accept-Language
        type: string
      - description: Request id
        in: header
        name: Set-Request-Id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.successOutput'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorOutput'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.errorOutput'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.errorOutput'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorOutput'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorOutput'
      security:
      - BasicAuth: []
      - JWTAuth: []
      summary: Get drivers
      tags:
      - drivers
  /api/v1/external/login:
    post:
      consumes:
      - multipart/form-data
      description: Login by email and password.
      parameters:
      - default: en
        description: Language code
        enum:
        - en
        - ru
        in: header
        name: Accept-Language
        type: string
      - description: Request id
        in: header
        name: Set-Request-Id
        type: string
      - description: User email
        in: formData
        name: email
        required: true
        type: string
      - description: User password
        in: formData
        name: password
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.successOutput'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorOutput'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.errorOutput'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorOutput'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/response.errorOutput'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorOutput'
      summary: Authentication login
      tags:
      - authentication
  /api/v1/external/logout:
    post:
      description: Logout using Authorization Header.
      parameters:
      - default: en
        description: Language code
        enum:
        - en
        - ru
        in: header
        name: Accept-Language
        type: string
      - description: Request id
        in: header
        name: Set-Request-Id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.successOutput'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorOutput'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.errorOutput'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorOutput'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorOutput'
      security:
      - JWTAuth: []
      summary: Authentication logout
      tags:
      - authentication
  /api/v1/external/order:
    post:
      consumes:
      - application/json
      description: Create a new order.
      parameters:
      - default: en
        description: Language code
        enum:
        - en
        - ru
        in: header
        name: Accept-Language
        type: string
      - description: Request id
        in: header
        name: Set-Request-Id
        type: string
      - description: Order order
        in: body
        name: order
        required: true
        schema:
          $ref: '#/definitions/entity.DetailOrder'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/response.successOutput'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorOutput'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.errorOutput'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.errorOutput'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorOutput'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorOutput'
      security:
      - BasicAuth: []
      - JWTAuth: []
      summary: Create a new order
      tags:
      - orders
  /api/v1/external/order/{uuid}:
    delete:
      description: Delete an existing order.
      parameters:
      - default: en
        description: Language code
        enum:
        - en
        - ru
        in: header
        name: Accept-Language
        type: string
      - description: Request id
        in: header
        name: Set-Request-Id
        type: string
      - description: Order UUID
        in: path
        name: uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.successOutput'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorOutput'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.errorOutput'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.errorOutput'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorOutput'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorOutput'
      security:
      - BasicAuth: []
      - JWTAuth: []
      summary: Delete order
      tags:
      - orders
    get:
      description: Get detail of existing order.
      parameters:
      - default: en
        description: Language code
        enum:
        - en
        - ru
        in: header
        name: Accept-Language
        type: string
      - description: Request id
        in: header
        name: Set-Request-Id
        type: string
      - description: Order UUID
        in: path
        name: uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.successOutput'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorOutput'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.errorOutput'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.errorOutput'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorOutput'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorOutput'
      security:
      - BasicAuth: []
      - JWTAuth: []
      summary: Get order
      tags:
      - orders
  /api/v1/external/order/uuid:
    put:
      consumes:
      - application/json
      description: Update an existing order.
      parameters:
      - default: en
        description: Language code
        enum:
        - en
        - ru
        in: header
        name: Accept-Language
        type: string
      - description: Request id
        in: header
        name: Set-Request-Id
        type: string
      - description: Order order
        in: body
        name: order
        required: true
        schema:
          $ref: '#/definitions/entity.DetailOrder'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.successOutput'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorOutput'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.errorOutput'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.errorOutput'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorOutput'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorOutput'
      security:
      - BasicAuth: []
      - JWTAuth: []
      summary: Update order
      tags:
      - orders
  /api/v1/external/orderStatusType:
    post:
      consumes:
      - application/json
      description: Create a new orderStatusType.
      parameters:
      - default: en
        description: Language code
        enum:
        - en
        - ru
        in: header
        name: Accept-Language
        type: string
      - description: Request id
        in: header
        name: Set-Request-Id
        type: string
      - description: OrderStatusType orderStatusType
        in: body
        name: orderStatusType
        required: true
        schema:
          $ref: '#/definitions/entity.DetailOrderStatusType'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/response.successOutput'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorOutput'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.errorOutput'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.errorOutput'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorOutput'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorOutput'
      security:
      - BasicAuth: []
      - JWTAuth: []
      summary: Create a new orderStatusType
      tags:
      - ordes status types
  /api/v1/external/orderStatusType/{uuid}:
    delete:
      description: Delete an existing orderStatusType.
      parameters:
      - default: en
        description: Language code
        enum:
        - en
        - ru
        in: header
        name: Accept-Language
        type: string
      - description: Request id
        in: header
        name: Set-Request-Id
        type: string
      - description: OrderStatusType UUID
        in: path
        name: uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.successOutput'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorOutput'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.errorOutput'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.errorOutput'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorOutput'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorOutput'
      security:
      - BasicAuth: []
      - JWTAuth: []
      summary: Delete orderStatusType
      tags:
      - ordes status types
    get:
      description: Get detail of existing orderStatusType.
      parameters:
      - default: en
        description: Language code
        enum:
        - en
        - ru
        in: header
        name: Accept-Language
        type: string
      - description: Request id
        in: header
        name: Set-Request-Id
        type: string
      - description: OrderStatusType UUID
        in: path
        name: uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.successOutput'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorOutput'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.errorOutput'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.errorOutput'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorOutput'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorOutput'
      security:
      - BasicAuth: []
      - JWTAuth: []
      summary: Get orderStatusType
      tags:
      - ordes status types
  /api/v1/external/orderStatusType/uuid:
    put:
      consumes:
      - application/json
      description: Update an existing orderStatusType.
      parameters:
      - default: en
        description: Language code
        enum:
        - en
        - ru
        in: header
        name: Accept-Language
        type: string
      - description: Request id
        in: header
        name: Set-Request-Id
        type: string
      - description: OrderStatusType UUID
        in: path
        name: uuid
        required: true
        type: string
      - description: OrderStatusType name
        in: formData
        name: name
        required: true
        type: string
      - description: OrderStatusType region
        in: formData
        name: region
        required: true
        type: string
      - description: OrderStatusType latitude
        in: formData
        name: latitude
        required: true
        type: string
      - description: OrderStatusType longitude
        in: formData
        name: longitude
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.successOutput'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorOutput'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.errorOutput'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.errorOutput'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorOutput'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorOutput'
      security:
      - BasicAuth: []
      - JWTAuth: []
      summary: Update orderStatusType
      tags:
      - ordes status types
  /api/v1/external/orderStatusTypes:
    get:
      description: Get list of existing orderStatusTypes.
      parameters:
      - default: en
        description: Language code
        enum:
        - en
        - ru
        in: header
        name: Accept-Language
        type: string
      - description: Request id
        in: header
        name: Set-Request-Id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.successOutput'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorOutput'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.errorOutput'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.errorOutput'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorOutput'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorOutput'
      security:
      - BasicAuth: []
      - JWTAuth: []
      summary: Get orderStatusTypes
      tags:
      - ordes status types
  /api/v1/external/orders:
    get:
      description: Get list of existing orders.
      parameters:
      - default: en
        description: Language code
        enum:
        - en
        - ru
        in: header
        name: Accept-Language
        type: string
      - description: Request id
        in: header
        name: Set-Request-Id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.successOutput'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorOutput'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.errorOutput'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.errorOutput'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorOutput'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorOutput'
      security:
      - BasicAuth: []
      - JWTAuth: []
      summary: Get orders
      tags:
      - orders
  /api/v1/external/passenger:
    post:
      consumes:
      - application/json
      description: Create a new passenger.
      parameters:
      - default: en
        description: Language code
        enum:
        - en
        - ru
        in: header
        name: Accept-Language
        type: string
      - description: Request id
        in: header
        name: Set-Request-Id
        type: string
      - description: Passenger passenger
        in: body
        name: passenger
        required: true
        schema:
          $ref: '#/definitions/entity.DetailPassenger'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/response.successOutput'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorOutput'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.errorOutput'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.errorOutput'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorOutput'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorOutput'
      security:
      - BasicAuth: []
      - JWTAuth: []
      summary: Create a new passenger
      tags:
      - passenger
  /api/v1/external/passenger/{uuid}:
    delete:
      description: Delete an existing passenger.
      parameters:
      - default: en
        description: Language code
        enum:
        - en
        - ru
        in: header
        name: Accept-Language
        type: string
      - description: Request id
        in: header
        name: Set-Request-Id
        type: string
      - description: Passenger UUID
        in: path
        name: uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.successOutput'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorOutput'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.errorOutput'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.errorOutput'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorOutput'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorOutput'
      security:
      - BasicAuth: []
      - JWTAuth: []
      summary: Delete passenger
      tags:
      - passenger
    get:
      description: Get detail of existing passenger.
      parameters:
      - default: en
        description: Language code
        enum:
        - en
        - ru
        in: header
        name: Accept-Language
        type: string
      - description: Request id
        in: header
        name: Set-Request-Id
        type: string
      - description: Passenger UUID
        in: path
        name: uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.successOutput'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorOutput'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.errorOutput'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.errorOutput'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorOutput'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorOutput'
      security:
      - BasicAuth: []
      - JWTAuth: []
      summary: Get passenger
      tags:
      - passenger
  /api/v1/external/passenger/uuid:
    put:
      consumes:
      - application/json
      description: Update an existing passenger.
      parameters:
      - default: en
        description: Language code
        enum:
        - en
        - ru
        in: header
        name: Accept-Language
        type: string
      - description: Request id
        in: header
        name: Set-Request-Id
        type: string
      - description: Passenger UUID
        in: path
        name: uuid
        required: true
        type: string
      - description: Passenger name
        in: formData
        name: name
        required: true
        type: string
      - description: Passenger region
        in: formData
        name: region
        required: true
        type: string
      - description: Passenger latitude
        in: formData
        name: latitude
        required: true
        type: string
      - description: Passenger longitude
        in: formData
        name: longitude
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.successOutput'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorOutput'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.errorOutput'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.errorOutput'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorOutput'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorOutput'
      security:
      - BasicAuth: []
      - JWTAuth: []
      summary: Update passenger
      tags:
      - passenger
  /api/v1/external/passengerTypes:
    get:
      description: Get list of existing passengerTypes.
      parameters:
      - default: en
        description: Language code
        enum:
        - en
        - ru
        in: header
        name: Accept-Language
        type: string
      - description: Request id
        in: header
        name: Set-Request-Id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.successOutput'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorOutput'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.errorOutput'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.errorOutput'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorOutput'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorOutput'
      security:
      - BasicAuth: []
      - JWTAuth: []
      summary: Get passengerTypes
      tags:
      - passenger types
    post:
      consumes:
      - application/json
      description: Create a new passengerType.
      parameters:
      - default: en
        description: Language code
        enum:
        - en
        - ru
        in: header
        name: Accept-Language
        type: string
      - description: Request id
        in: header
        name: Set-Request-Id
        type: string
      - description: PassengerType passengerType
        in: body
        name: passengerType
        required: true
        schema:
          $ref: '#/definitions/entity.DetailPassengerType'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/response.successOutput'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorOutput'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.errorOutput'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.errorOutput'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorOutput'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorOutput'
      security:
      - BasicAuth: []
      - JWTAuth: []
      summary: Create a new passengerType
      tags:
      - passenger types
  /api/v1/external/passengerTypes/{uuid}:
    delete:
      description: Delete an existing passengerType.
      parameters:
      - default: en
        description: Language code
        enum:
        - en
        - ru
        in: header
        name: Accept-Language
        type: string
      - description: Request id
        in: header
        name: Set-Request-Id
        type: string
      - description: PassengerType UUID
        in: path
        name: uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.successOutput'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorOutput'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.errorOutput'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.errorOutput'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorOutput'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorOutput'
      security:
      - BasicAuth: []
      - JWTAuth: []
      summary: Delete passengerType
      tags:
      - passenger types
    get:
      description: Get detail of existing passengerType.
      parameters:
      - default: en
        description: Language code
        enum:
        - en
        - ru
        in: header
        name: Accept-Language
        type: string
      - description: Request id
        in: header
        name: Set-Request-Id
        type: string
      - description: PassengerType UUID
        in: path
        name: uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.successOutput'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorOutput'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.errorOutput'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.errorOutput'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorOutput'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorOutput'
      security:
      - BasicAuth: []
      - JWTAuth: []
      summary: Get passengerType
      tags:
      - passenger types
  /api/v1/external/passengerTypes/uuid:
    put:
      consumes:
      - application/json
      description: Update an existing passengerType.
      parameters:
      - default: en
        description: Language code
        enum:
        - en
        - ru
        in: header
        name: Accept-Language
        type: string
      - description: Request id
        in: header
        name: Set-Request-Id
        type: string
      - description: PassengerType UUID
        in: path
        name: uuid
        required: true
        type: string
      - description: PassengerType name
        in: formData
        name: name
        required: true
        type: string
      - description: PassengerType region
        in: formData
        name: region
        required: true
        type: string
      - description: PassengerType latitude
        in: formData
        name: latitude
        required: true
        type: string
      - description: PassengerType longitude
        in: formData
        name: longitude
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.successOutput'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorOutput'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.errorOutput'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.errorOutput'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorOutput'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorOutput'
      security:
      - BasicAuth: []
      - JWTAuth: []
      summary: Update passengerType
      tags:
      - passenger types
  /api/v1/external/passengers:
    get:
      description: Get list of existing passengers.
      parameters:
      - default: en
        description: Language code
        enum:
        - en
        - ru
        in: header
        name: Accept-Language
        type: string
      - description: Request id
        in: header
        name: Set-Request-Id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.successOutput'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorOutput'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.errorOutput'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.errorOutput'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorOutput'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorOutput'
      security:
      - BasicAuth: []
      - JWTAuth: []
      summary: Get passengers
      tags:
      - passenger
  /api/v1/external/password/forgot:
    post:
      consumes:
      - multipart/form-data
      description: Retrieve an email contain link to reset password.
      parameters:
      - default: en
        description: Language code
        enum:
        - en
        - ru
        in: header
        name: Accept-Language
        type: string
      - description: Email address
        in: formData
        name: email
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.successOutput'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorOutput'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorOutput'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/response.errorOutput'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorOutput'
      summary: Authentication forgot password
      tags:
      - authentication
  /api/v1/external/password/reset/{token}:
    post:
      consumes:
      - multipart/form-data
      description: Set a new password.
      parameters:
      - default: en
        description: Language code
        enum:
        - en
        - ru
        in: header
        name: Accept-Language
        type: string
      - description: Token from forgot password request
        in: formData
        name: token
        required: true
        type: string
      - description: New password
        in: formData
        name: new_password
        required: true
        type: string
      - description: Confirm password
        in: formData
        name: confirm_password
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.successOutput'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorOutput'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorOutput'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/response.errorOutput'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorOutput'
      summary: Authentication reset password
      tags:
      - authentication
  /api/v1/external/payment:
    post:
      consumes:
      - application/json
      description: Create a new payment.
      parameters:
      - default: en
        description: Language code
        enum:
        - en
        - ru
        in: header
        name: Accept-Language
        type: string
      - description: Request id
        in: header
        name: Set-Request-Id
        type: string
      - description: Payment payment
        in: body
        name: payment
        required: true
        schema:
          $ref: '#/definitions/entity.DetailPayment'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/response.successOutput'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorOutput'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.errorOutput'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.errorOutput'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorOutput'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorOutput'
      security:
      - BasicAuth: []
      - JWTAuth: []
      summary: Create a new payment
      tags:
      - payments
  /api/v1/external/payment/{uuid}:
    delete:
      description: Delete an existing payment.
      parameters:
      - default: en
        description: Language code
        enum:
        - en
        - ru
        in: header
        name: Accept-Language
        type: string
      - description: Request id
        in: header
        name: Set-Request-Id
        type: string
      - description: Payment UUID
        in: path
        name: uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.successOutput'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorOutput'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.errorOutput'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.errorOutput'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorOutput'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorOutput'
      security:
      - BasicAuth: []
      - JWTAuth: []
      summary: Delete payment
      tags:
      - payments
    get:
      description: Get detail of existing payment.
      parameters:
      - default: en
        description: Language code
        enum:
        - en
        - ru
        in: header
        name: Accept-Language
        type: string
      - description: Request id
        in: header
        name: Set-Request-Id
        type: string
      - description: Payment UUID
        in: path
        name: uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.successOutput'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorOutput'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.errorOutput'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.errorOutput'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorOutput'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorOutput'
      security:
      - BasicAuth: []
      - JWTAuth: []
      summary: Get payment
      tags:
      - payments
  /api/v1/external/payment/order_add:
    post:
      consumes:
      - application/json
      description: Add order to a payment.
      parameters:
      - default: en
        description: Language code
        enum:
        - en
        - ru
        in: header
        name: Accept-Language
        type: string
      - description: Request id
        in: header
        name: Set-Request-Id
        type: string
      - description: Payment payment
        in: body
        name: payment
        required: true
        schema:
          $ref: '#/definitions/entity.DetailPayment'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/response.successOutput'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorOutput'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.errorOutput'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.errorOutput'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorOutput'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorOutput'
      security:
      - BasicAuth: []
      - JWTAuth: []
      summary: Add order to a payment
      tags:
      - payments
  /api/v1/external/payment/order_del:
    post:
      consumes:
      - application/json
      description: Delete order to a payment.
      parameters:
      - default: en
        description: Language code
        enum:
        - en
        - ru
        in: header
        name: Accept-Language
        type: string
      - description: Request id
        in: header
        name: Set-Request-Id
        type: string
      - description: Payment payment
        in: body
        name: payment
        required: true
        schema:
          $ref: '#/definitions/entity.DetailPayment'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/response.successOutput'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorOutput'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.errorOutput'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.errorOutput'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorOutput'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorOutput'
      security:
      - BasicAuth: []
      - JWTAuth: []
      summary: Delete order to a payment
      tags:
      - payments
  /api/v1/external/payment/uuid:
    put:
      consumes:
      - application/json
      description: Update an existing payment.
      parameters:
      - default: en
        description: Language code
        enum:
        - en
        - ru
        in: header
        name: Accept-Language
        type: string
      - description: Request id
        in: header
        name: Set-Request-Id
        type: string
      - description: Payment payment
        in: body
        name: payment
        required: true
        schema:
          $ref: '#/definitions/entity.DetailPayment'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.successOutput'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorOutput'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.errorOutput'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.errorOutput'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorOutput'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorOutput'
      security:
      - BasicAuth: []
      - JWTAuth: []
      summary: Update payment
      tags:
      - payments
  /api/v1/external/payments:
    get:
      description: Get list of existing payments.
      parameters:
      - default: en
        description: Language code
        enum:
        - en
        - ru
        in: header
        name: Accept-Language
        type: string
      - description: Request id
        in: header
        name: Set-Request-Id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.successOutput'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorOutput'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.errorOutput'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.errorOutput'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorOutput'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorOutput'
      security:
      - BasicAuth: []
      - JWTAuth: []
      summary: Get payments
      tags:
      - payments
  /api/v1/external/preference:
    get:
      description: Get current user preference using Authorization Header.
      parameters:
      - default: en
        description: Language code
        enum:
        - en
        - ru
        in: header
        name: Accept-Language
        type: string
      - description: Request id
        in: header
        name: Set-Request-Id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.successOutput'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorOutput'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.errorOutput'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorOutput'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorOutput'
      security:
      - BasicAuth: []
      - JWTAuth: []
      summary: User preference
      tags:
      - preference
    put:
      consumes:
      - application/json
      description: Update current user preference using Authorization Header.
      parameters:
      - default: en
        description: Language code
        enum:
        - en
        - ru
        in: header
        name: Accept-Language
        type: string
      - description: Request id
        in: header
        name: Set-Request-Id
        type: string
      - description: User preference
        in: body
        name: preference
        required: true
        schema:
          $ref: '#/definitions/entity.DetailUserPreference'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.successOutput'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorOutput'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.errorOutput'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorOutput'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/response.errorOutput'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorOutput'
      security:
      - BasicAuth: []
      - JWTAuth: []
      summary: Update user preference
      tags:
      - preference
  /api/v1/external/preference/reset:
    post:
      description: Reset current user preference to default using Authorization Header.
      parameters:
      - default: en
        description: Language code
        enum:
        - en
        - ru
        in: header
        name: Accept-Language
        type: string
      - description: Request id
        in: header
        name: Set-Request-Id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.successOutput'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorOutput'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.errorOutput'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorOutput'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorOutput'
      security:
      - BasicAuth: []
      - JWTAuth: []
      summary: Reset user preference
      tags:
      - preference
  /api/v1/external/price:
    post:
      consumes:
      - application/json
      description: Create a new price.
      parameters:
      - default: en
        description: Language code
        enum:
        - en
        - ru
        in: header
        name: Accept-Language
        type: string
      - description: Request id
        in: header
        name: Set-Request-Id
        type: string
      - description: Price price
        in: body
        name: price
        required: true
        schema:
          $ref: '#/definitions/entity.DetailPrice'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/response.successOutput'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorOutput'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.errorOutput'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.errorOutput'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorOutput'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorOutput'
      security:
      - BasicAuth: []
      - JWTAuth: []
      summary: Create a new price
      tags:
      - prices
  /api/v1/external/price/{uuid}:
    delete:
      description: Delete an existing price.
      parameters:
      - default: en
        description: Language code
        enum:
        - en
        - ru
        in: header
        name: Accept-Language
        type: string
      - description: Request id
        in: header
        name: Set-Request-Id
        type: string
      - description: Price UUID
        in: path
        name: uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.successOutput'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorOutput'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.errorOutput'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.errorOutput'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorOutput'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorOutput'
      security:
      - BasicAuth: []
      - JWTAuth: []
      summary: Delete price
      tags:
      - prices
    get:
      description: Get detail of existing price.
      parameters:
      - default: en
        description: Language code
        enum:
        - en
        - ru
        in: header
        name: Accept-Language
        type: string
      - description: Request id
        in: header
        name: Set-Request-Id
        type: string
      - description: Price UUID
        in: path
        name: uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.successOutput'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorOutput'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.errorOutput'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.errorOutput'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorOutput'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorOutput'
      security:
      - BasicAuth: []
      - JWTAuth: []
      summary: Get price
      tags:
      - prices
  /api/v1/external/price/uuid:
    put:
      consumes:
      - application/json
      description: Update an existing price.
      parameters:
      - default: en
        description: Language code
        enum:
        - en
        - ru
        in: header
        name: Accept-Language
        type: string
      - description: Request id
        in: header
        name: Set-Request-Id
        type: string
      - description: Price UUID
        in: path
        name: uuid
        required: true
        type: string
      - description: Price name
        in: formData
        name: name
        required: true
        type: string
      - description: Price region
        in: formData
        name: region
        required: true
        type: string
      - description: Price latitude
        in: formData
        name: latitude
        required: true
        type: string
      - description: Price longitude
        in: formData
        name: longitude
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.successOutput'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorOutput'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.errorOutput'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.errorOutput'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorOutput'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorOutput'
      security:
      - BasicAuth: []
      - JWTAuth: []
      summary: Update price
      tags:
      - prices
  /api/v1/external/prices:
    get:
      description: Get list of existing prices.
      parameters:
      - default: en
        description: Language code
        enum:
        - en
        - ru
        in: header
        name: Accept-Language
        type: string
      - description: Request id
        in: header
        name: Set-Request-Id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.successOutput'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorOutput'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.errorOutput'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.errorOutput'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorOutput'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorOutput'
      security:
      - BasicAuth: []
      - JWTAuth: []
      summary: Get prices
      tags:
      - prices
  /api/v1/external/profile:
    get:
      description: Get current user profile using Authorization Header.
      parameters:
      - default: en
        description: Language code
        enum:
        - en
        - ru
        in: header
        name: Accept-Language
        type: string
      - description: Request id
        in: header
        name: Set-Request-Id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.successOutput'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorOutput'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.errorOutput'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorOutput'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorOutput'
      security:
      - BasicAuth: []
      - JWTAuth: []
      - OauthGrantTypePassword: []
      summary: Authentication profile
      tags:
      - authentication
  /api/v1/external/refresh:
    post:
      consumes:
      - multipart/form-data
      description: Retrieve a new access_token using refresh token.
      parameters:
      - default: en
        description: Language code
        enum:
        - en
        - ru
        in: header
        name: Accept-Language
        type: string
      - description: Refresh token from /login
        in: formData
        name: refresh_token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.successOutput'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorOutput'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorOutput'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/response.errorOutput'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorOutput'
      summary: Authentication refresh
      tags:
      - authentication
  /api/v1/external/regularityType:
    post:
      consumes:
      - application/json
      description: Create a new regularityType.
      parameters:
      - default: en
        description: Language code
        enum:
        - en
        - ru
        in: header
        name: Accept-Language
        type: string
      - description: Request id
        in: header
        name: Set-Request-Id
        type: string
      - description: RegularityType regularityType
        in: body
        name: regularityType
        required: true
        schema:
          $ref: '#/definitions/entity.DetailRegularityType'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/response.successOutput'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorOutput'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.errorOutput'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.errorOutput'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorOutput'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorOutput'
      security:
      - BasicAuth: []
      - JWTAuth: []
      summary: Create a new regularityType
      tags:
      - regularity types
  /api/v1/external/regularityType/{uuid}:
    delete:
      description: Delete an existing regularityType.
      parameters:
      - default: en
        description: Language code
        enum:
        - en
        - ru
        in: header
        name: Accept-Language
        type: string
      - description: Request id
        in: header
        name: Set-Request-Id
        type: string
      - description: RegularityType UUID
        in: path
        name: uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.successOutput'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorOutput'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.errorOutput'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.errorOutput'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorOutput'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorOutput'
      security:
      - BasicAuth: []
      - JWTAuth: []
      summary: Delete regularityType
      tags:
      - regularity types
    get:
      description: Get detail of existing regularityType.
      parameters:
      - default: en
        description: Language code
        enum:
        - en
        - ru
        in: header
        name: Accept-Language
        type: string
      - description: Request id
        in: header
        name: Set-Request-Id
        type: string
      - description: RegularityType UUID
        in: path
        name: uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.successOutput'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorOutput'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.errorOutput'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.errorOutput'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorOutput'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorOutput'
      security:
      - BasicAuth: []
      - JWTAuth: []
      summary: Get regularityType
      tags:
      - regularity types
  /api/v1/external/regularityType/uuid:
    put:
      consumes:
      - application/json
      description: Update an existing regularityType.
      parameters:
      - default: en
        description: Language code
        enum:
        - en
        - ru
        in: header
        name: Accept-Language
        type: string
      - description: Request id
        in: header
        name: Set-Request-Id
        type: string
      - description: RegularityType UUID
        in: path
        name: uuid
        required: true
        type: string
      - description: RegularityType name
        in: formData
        name: name
        required: true
        type: string
      - description: RegularityType region
        in: formData
        name: region
        required: true
        type: string
      - description: RegularityType latitude
        in: formData
        name: latitude
        required: true
        type: string
      - description: RegularityType longitude
        in: formData
        name: longitude
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.successOutput'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorOutput'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.errorOutput'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.errorOutput'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorOutput'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorOutput'
      security:
      - BasicAuth: []
      - JWTAuth: []
      summary: Update regularityType
      tags:
      - regularity types
  /api/v1/external/regularityTypes:
    get:
      description: Get list of existing regularityTypes.
      parameters:
      - default: en
        description: Language code
        enum:
        - en
        - ru
        in: header
        name: Accept-Language
        type: string
      - description: Request id
        in: header
        name: Set-Request-Id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.successOutput'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorOutput'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.errorOutput'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.errorOutput'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorOutput'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorOutput'
      security:
      - BasicAuth: []
      - JWTAuth: []
      summary: Get regularityTypes
      tags:
      - regularity types
  /api/v1/external/route:
    post:
      consumes:
      - application/json
      description: Create a new route.
      parameters:
      - default: en
        description: Language code
        enum:
        - en
        - ru
        in: header
        name: Accept-Language
        type: string
      - description: Request id
        in: header
        name: Set-Request-Id
        type: string
      - description: Route route
        in: body
        name: route
        required: true
        schema:
          $ref: '#/definitions/entity.DetailRoute'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/response.successOutput'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorOutput'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.errorOutput'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.errorOutput'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorOutput'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorOutput'
      security:
      - BasicAuth: []
      - JWTAuth: []
      summary: Create a new route
      tags:
      - routes
  /api/v1/external/route/{uuid}:
    delete:
      description: Delete an existing route.
      parameters:
      - default: en
        description: Language code
        enum:
        - en
        - ru
        in: header
        name: Accept-Language
        type: string
      - description: Request id
        in: header
        name: Set-Request-Id
        type: string
      - description: Route UUID
        in: path
        name: uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.successOutput'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorOutput'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.errorOutput'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.errorOutput'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorOutput'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorOutput'
      security:
      - BasicAuth: []
      - JWTAuth: []
      summary: Delete route
      tags:
      - routes
    get:
      description: Get detail of existing route.
      parameters:
      - default: en
        description: Language code
        enum:
        - en
        - ru
        in: header
        name: Accept-Language
        type: string
      - description: Request id
        in: header
        name: Set-Request-Id
        type: string
      - description: Route UUID
        in: path
        name: uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.successOutput'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorOutput'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.errorOutput'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.errorOutput'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorOutput'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorOutput'
      security:
      - BasicAuth: []
      - JWTAuth: []
      summary: Get route
      tags:
      - routes
  /api/v1/external/route/price_add:
    post:
      consumes:
      - application/json
      description: Add price to a route.
      parameters:
      - default: en
        description: Language code
        enum:
        - en
        - ru
        in: header
        name: Accept-Language
        type: string
      - description: Request id
        in: header
        name: Set-Request-Id
        type: string
      - description: Route route
        in: body
        name: route
        required: true
        schema:
          $ref: '#/definitions/entity.DetailRoute'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/response.successOutput'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorOutput'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.errorOutput'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.errorOutput'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorOutput'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorOutput'
      security:
      - BasicAuth: []
      - JWTAuth: []
      summary: Add price to a route
      tags:
      - routes
  /api/v1/external/route/price_del:
    post:
      consumes:
      - application/json
      description: Delete price to a route.
      parameters:
      - default: en
        description: Language code
        enum:
        - en
        - ru
        in: header
        name: Accept-Language
        type: string
      - description: Request id
        in: header
        name: Set-Request-Id
        type: string
      - description: Route route
        in: body
        name: route
        required: true
        schema:
          $ref: '#/definitions/entity.DetailRoute'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/response.successOutput'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorOutput'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.errorOutput'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.errorOutput'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorOutput'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorOutput'
      security:
      - BasicAuth: []
      - JWTAuth: []
      summary: Delete price to a route
      tags:
      - routes
  /api/v1/external/route/uuid:
    put:
      consumes:
      - application/json
      description: Update an existing route.
      parameters:
      - default: en
        description: Language code
        enum:
        - en
        - ru
        in: header
        name: Accept-Language
        type: string
      - description: Request id
        in: header
        name: Set-Request-Id
        type: string
      - description: Route route
        in: body
        name: route
        required: true
        schema:
          $ref: '#/definitions/entity.DetailRoute'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.successOutput'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorOutput'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.errorOutput'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.errorOutput'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorOutput'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorOutput'
      security:
      - BasicAuth: []
      - JWTAuth: []
      summary: Update route
      tags:
      - routes
  /api/v1/external/routes:
    get:
      description: Get list of existing routes.
      parameters:
      - default: en
        description: Language code
        enum:
        - en
        - ru
        in: header
        name: Accept-Language
        type: string
      - description: Request id
        in: header
        name: Set-Request-Id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.successOutput'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorOutput'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.errorOutput'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.errorOutput'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorOutput'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorOutput'
      security:
      - BasicAuth: []
      - JWTAuth: []
      summary: Get routes
      tags:
      - routes
  /api/v1/external/sities:
    get:
      description: Get list of existing sities.
      parameters:
      - default: en
        description: Language code
        enum:
        - en
        - ru
        in: header
        name: Accept-Language
        type: string
      - description: Request id
        in: header
        name: Set-Request-Id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.successOutput'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorOutput'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorOutput'
      summary: Get sities
      tags:
      - sity
  /api/v1/external/sity:
    post:
      consumes:
      - application/json
      description: Create a new sity.
      parameters:
      - default: en
        description: Language code
        enum:
        - en
        - ru
        in: header
        name: Accept-Language
        type: string
      - description: Request id
        in: header
        name: Set-Request-Id
        type: string
      - description: Sity sity
        in: body
        name: passenger
        required: true
        schema:
          $ref: '#/definitions/entity.DetailSity'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/response.successOutput'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorOutput'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.errorOutput'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.errorOutput'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorOutput'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorOutput'
      security:
      - BasicAuth: []
      - JWTAuth: []
      summary: Create a new sity
      tags:
      - sity
  /api/v1/external/sity/{uuid}:
    delete:
      description: Delete an existing sity.
      parameters:
      - default: en
        description: Language code
        enum:
        - en
        - ru
        in: header
        name: Accept-Language
        type: string
      - description: Request id
        in: header
        name: Set-Request-Id
        type: string
      - description: Sity UUID
        in: path
        name: uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.successOutput'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorOutput'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.errorOutput'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.errorOutput'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorOutput'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorOutput'
      security:
      - BasicAuth: []
      - JWTAuth: []
      summary: Delete sity
      tags:
      - sity
    get:
      description: Get detail of existing sity.
      parameters:
      - default: en
        description: Language code
        enum:
        - en
        - ru
        in: header
        name: Accept-Language
        type: string
      - description: Request id
        in: header
        name: Set-Request-Id
        type: string
      - description: Sity UUID
        in: path
        name: uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.successOutput'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorOutput'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorOutput'
      summary: Get sity
      tags:
      - sity
  /api/v1/external/sity/uuid:
    put:
      consumes:
      - application/json
      description: Update an existing sity.
      parameters:
      - default: en
        description: Language code
        enum:
        - en
        - ru
        in: header
        name: Accept-Language
        type: string
      - description: Request id
        in: header
        name: Set-Request-Id
        type: string
      - description: Sity sity
        in: body
        name: passenger
        required: true
        schema:
          $ref: '#/definitions/entity.DetailSity'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.successOutput'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorOutput'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.errorOutput'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.errorOutput'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorOutput'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorOutput'
      security:
      - BasicAuth: []
      - JWTAuth: []
      summary: Update sity
      tags:
      - sity
  /api/v1/external/users:
    get:
      description: Get list of existing users.
      parameters:
      - default: en
        description: Language code
        enum:
        - en
        - ru
        in: header
        name: Accept-Language
        type: string
      - description: Request id
        in: header
        name: Set-Request-Id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.successOutput'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorOutput'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.errorOutput'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.errorOutput'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorOutput'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorOutput'
      security:
      - BasicAuth: []
      - JWTAuth: []
      - ApiKeyAuth: []
      summary: Get users
      tags:
      - users
    post:
      consumes:
      - multipart/form-data
      description: Create a new user.
      parameters:
      - default: en
        description: Language code
        enum:
        - en
        - ru
        in: header
        name: Accept-Language
        type: string
      - description: Request id
        in: header
        name: Set-Request-Id
        type: string
      - description: User name
        in: formData
        name: name
        required: true
        type: string
      - description: User password
        in: formData
        name: password
        required: true
        type: string
      - description: User email
        in: formData
        name: email
        required: true
        type: string
      - description: User phone
        in: formData
        name: phone
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/response.successOutput'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorOutput'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.errorOutput'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.errorOutput'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorOutput'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorOutput'
      security:
      - BasicAuth: []
      - JWTAuth: []
      summary: Create a new user
      tags:
      - users
  /api/v1/external/users/{uuid}:
    delete:
      description: Delete an existing user.
      parameters:
      - default: en
        description: Language code
        enum:
        - en
        - ru
        in: header
        name: Accept-Language
        type: string
      - description: Request id
        in: header
        name: Set-Request-Id
        type: string
      - description: User UUID
        in: path
        name: uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.successOutput'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorOutput'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.errorOutput'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.errorOutput'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorOutput'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorOutput'
      security:
      - BasicAuth: []
      - JWTAuth: []
      summary: Delete user
      tags:
      - users
    get:
      description: Get detail of existing user.
      parameters:
      - default: en
        description: Language code
        enum:
        - en
        - ru
        in: header
        name: Accept-Language
        type: string
      - description: Request id
        in: header
        name: Set-Request-Id
        type: string
      - description: User UUID
        in: path
        name: uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.successOutput'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorOutput'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.errorOutput'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.errorOutput'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorOutput'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorOutput'
      security:
      - BasicAuth: []
      - JWTAuth: []
      summary: Get user
      tags:
      - users
  /api/v1/external/users/{uuid}/avatar:
    put:
      consumes:
      - multipart/form-data
      description: Update user avatar of existing user.
      parameters:
      - default: en
        description: Language code
        enum:
        - en
        - ru
        in: header
        name: Accept-Language
        type: string
      - description: Request id
        in: header
        name: Set-Request-Id
        type: string
      - description: User UUID
        in: path
        name: uuid
        required: true
        type: string
      - description: User Avatar
        in: formData
        name: avatar
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.successOutput'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorOutput'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.errorOutput'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.errorOutput'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorOutput'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorOutput'
      security:
      - BasicAuth: []
      - JWTAuth: []
      summary: Update user avatar
      tags:
      - users
  /api/v1/external/users/uuid:
    put:
      consumes:
      - multipart/form-data
      description: Update an existing user.
      parameters:
      - default: en
        description: Language code
        enum:
        - en
        - ru
        in: header
        name: Accept-Language
        type: string
      - description: Request id
        in: header
        name: Set-Request-Id
        type: string
      - description: User UUID
        in: path
        name: uuid
        required: true
        type: string
      - description: User name
        in: formData
        name: name
        required: true
        type: string
      - description: User password
        in: formData
        name: password
        required: true
        type: string
      - description: User email
        in: formData
        name: email
        required: true
        type: string
      - description: User phone
        in: formData
        name: phone
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.successOutput'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorOutput'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.errorOutput'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.errorOutput'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorOutput'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorOutput'
      security:
      - BasicAuth: []
      - JWTAuth: []
      summary: Update user
      tags:
      - users
  /api/v1/external/vehicles:
    get:
      description: Get list of existing vehicles.
      parameters:
      - default: en
        description: Language code
        enum:
        - en
        - ru
        in: header
        name: Accept-Language
        type: string
      - description: Request id
        in: header
        name: Set-Request-Id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.successOutput'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorOutput'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.errorOutput'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.errorOutput'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorOutput'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorOutput'
      security:
      - BasicAuth: []
      - JWTAuth: []
      summary: Get vehicles
      tags:
      - vehicles
    post:
      consumes:
      - application/json
      description: Create a new vehicle.
      parameters:
      - default: en
        description: Language code
        enum:
        - en
        - ru
        in: header
        name: Accept-Language
        type: string
      - description: Request id
        in: header
        name: Set-Request-Id
        type: string
      - description: Vehicle vehicle
        in: body
        name: vehicle
        required: true
        schema:
          $ref: '#/definitions/entity.DetailVehicle'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/response.successOutput'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorOutput'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.errorOutput'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.errorOutput'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorOutput'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorOutput'
      security:
      - BasicAuth: []
      - JWTAuth: []
      summary: Create a new vehicle
      tags:
      - vehicles
  /api/v1/external/vehicles/{uuid}:
    delete:
      description: Delete an existing vehicle.
      parameters:
      - default: en
        description: Language code
        enum:
        - en
        - ru
        in: header
        name: Accept-Language
        type: string
      - description: Request id
        in: header
        name: Set-Request-Id
        type: string
      - description: Vehicle UUID
        in: path
        name: uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.successOutput'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorOutput'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.errorOutput'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.errorOutput'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorOutput'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorOutput'
      security:
      - BasicAuth: []
      - JWTAuth: []
      summary: Delete vehicle
      tags:
      - vehicles
    get:
      description: Get detail of existing vehicle.
      parameters:
      - default: en
        description: Language code
        enum:
        - en
        - ru
        in: header
        name: Accept-Language
        type: string
      - description: Request id
        in: header
        name: Set-Request-Id
        type: string
      - description: Vehicle UUID
        in: path
        name: uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.successOutput'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorOutput'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.errorOutput'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.errorOutput'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorOutput'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorOutput'
      security:
      - BasicAuth: []
      - JWTAuth: []
      summary: Get vehicle
      tags:
      - vehicles
  /api/v1/external/vehicles/uuid:
    put:
      consumes:
      - application/json
      description: Update an existing vehicle.
      parameters:
      - default: en
        description: Language code
        enum:
        - en
        - ru
        in: header
        name: Accept-Language
        type: string
      - description: Request id
        in: header
        name: Set-Request-Id
        type: string
      - description: Vehicle UUID
        in: path
        name: uuid
        required: true
        type: string
      - description: Vehicle name
        in: formData
        name: name
        required: true
        type: string
      - description: Vehicle region
        in: formData
        name: region
        required: true
        type: string
      - description: Vehicle latitude
        in: formData
        name: latitude
        required: true
        type: string
      - description: Vehicle longitude
        in: formData
        name: longitude
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.successOutput'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorOutput'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.errorOutput'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.errorOutput'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorOutput'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorOutput'
      security:
      - BasicAuth: []
      - JWTAuth: []
      summary: Update vehicle
      tags:
      - vehicles
schemes:
- http
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: api_key
    type: apiKey
  BasicAuth:
    type: basic
  JWTAuth:
    in: header
    name: Authorization
    type: apiKey
  Oauth2AccessCode:
    authorizationUrl: http://api.cargo.re-base.ru:8888/oauth/authorize
    flow: accessCode
    scopes:
      all: ' Grants all access'
    tokenUrl: http://api.cargo.re-base.ru:8888/oauth/token
    type: oauth2
  Oauth2Password:
    flow: password
    scopes:
      all: ' Grants all access'
    tokenUrl: http://api.cargo.re-base.ru:8888/oauth/token
    type: oauth2
swagger: "2.0"
